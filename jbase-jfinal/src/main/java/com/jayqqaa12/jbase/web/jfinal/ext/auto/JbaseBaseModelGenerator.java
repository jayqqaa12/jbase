/**
 * Copyright (c) 2011-2013, jayqqaa12 12shu (476335667@qq.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.jayqqaa12.jbase.web.jfinal.ext.auto;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.generator.BaseModelGenerator;
import com.jfinal.plugin.activerecord.generator.ColumnMeta;
import com.jfinal.plugin.activerecord.generator.TableMeta;

public class JbaseBaseModelGenerator extends BaseModelGenerator {

	protected String importTemplate = "import com.jayqqaa12.jbase.jfinal.ext.model.Model;%n"
			+ "import com.jfinal.plugin.activerecord.IBean;%n%n";

	protected String setterTemplate = 
			 "\tpublic M %s(Object %s) {%n" + "\t\t return set(\"%s\", %s);%n" + "\t}%n%n";


	protected String isNullTemplate =
			"\tpublic boolean %s() {%n" + "\t\t return get(\"%s\")==null;%n" + "\t}%n%n";


	protected String classDefineTemplate = "/**%n" + " * Generated by Jbase, do not modify this file.%n" + " */%n"
			+ "@SuppressWarnings(\"serial\")%n"
			+ "public abstract class %s<M extends %s<M>> extends Model<M> implements IBean {%n%n";

	protected String attrTemplate = "\tpublic static final String %s = \"%s\"; %n";

	public JbaseBaseModelGenerator(String baseModelPackageName, String baseModelOutputDir) {
		super(baseModelPackageName, baseModelOutputDir);
	}

	protected void genBaseModelContent(TableMeta tableMeta) {
		StringBuilder ret = new StringBuilder();
		genPackage(tableMeta, ret);
		genImport(ret);
		genClassDefine(tableMeta, ret);

		for (ColumnMeta columnMeta : tableMeta.columnMetas) {
			genAttrName(columnMeta, ret);

		}
		for (ColumnMeta columnMeta : tableMeta.columnMetas) {
			genSetMethodName(columnMeta, ret);
			genGetMethodName(columnMeta, ret);

			genIsNullMethod(columnMeta,ret);
		}
		ret.append(String.format("}%n"));
		tableMeta.baseModelContent = ret.toString();
	}



	@Override
	protected void genClassDefine(TableMeta tableMeta, StringBuilder ret) {
		ret.append(String.format(classDefineTemplate, tableMeta.baseModelName, tableMeta.baseModelName));
	}
 
	protected void genAttrName(ColumnMeta columnMeta, StringBuilder ret) {

		ret.append(JbaseGenerator.getRemark(columnMeta));
		
		String attr = String.format(attrTemplate, columnMeta.name.toUpperCase(), columnMeta.name);
		ret.append(attr);
	}

	@Override
	protected void genImport(StringBuilder ret) {
		ret.append(String.format(this.importTemplate));
	}

	@Override
	protected void genGetMethodName(ColumnMeta columnMeta, StringBuilder ret) {
		ret.append(JbaseGenerator.getRemark(columnMeta));
		super.genGetMethodName(columnMeta, ret);
	}
	@Override
	protected void genSetMethodName(ColumnMeta columnMeta, StringBuilder ret) {
		ret.append(JbaseGenerator.getRemark(columnMeta));

		String setterMethodName = "set" + StrKit.firstCharToUpperCase(StrKit.toCamelCase(columnMeta.name));
		String attrName = StrKit.toCamelCase(columnMeta.name);
		String setter = String.format(setterTemplate,  setterMethodName, attrName, columnMeta.name, attrName);
		
		ret.append(setter);
	}

	private void genIsNullMethod(ColumnMeta columnMeta, StringBuilder ret) {
		ret.append(JbaseGenerator.getRemark(columnMeta));

		String methodName = "isNull" + StrKit.firstCharToUpperCase(StrKit.toCamelCase(columnMeta.name));
		String setter = String.format(isNullTemplate,  methodName,   columnMeta.name);
		ret.append(setter);
	}



	protected void genPackage(TableMeta tableMeta, StringBuilder ret) {

		ret.append(String.format(packageTemplate, JbaseGenerator.getPk(tableMeta, baseModelPackageName)));
	}

	protected void wirtToFile(TableMeta tableMeta) throws IOException {

		String pre = tableMeta.name.toLowerCase().replace("_", "").replace(tableMeta.modelName.toLowerCase(), "");

		String outDir = baseModelOutputDir;
		if (StrKit.notBlank(pre)) {
			outDir = baseModelOutputDir + File.separator + pre;
		}

		File dir = new File(outDir);
		if (!dir.exists()) dir.mkdirs();

		String target = outDir + File.separator + tableMeta.baseModelName + ".java";
		FileWriter fw = new FileWriter(target);
		try {
			fw.write(tableMeta.baseModelContent);
		} finally {
			fw.close();
		}
	}
}
